{"version":3,"sources":["FormBeforeUnloadConfirm.esm.js"],"names":["_submitForm","_changeCtrl","__classPrivateFieldSet","this","receiver","privateMap","value","has","TypeError","set","__classPrivateFieldGet","get","[object Object]","thisElement","formCtrlElement","elements","addEventListener","_formCtrlChangeEvent","bind","once","passive","_submitEvent","window","_windowBeforeUnloadEvent","ev","preventDefault","returnValue","WeakMap"],"mappings":"AAAA,IAaIA,EAAaC,EAbbC,EAA0BC,MAAQA,KAAKD,wBAA2B,SAAUE,EAAUC,EAAYC,GAClG,IAAKD,EAAWE,IAAIH,GAChB,MAAM,IAAII,UAAU,kDAGxB,OADAH,EAAWI,IAAIL,EAAUE,GAClBA,GAEPI,EAA0BP,MAAQA,KAAKO,wBAA2B,SAAUN,EAAUC,GACtF,IAAKA,EAAWE,IAAIH,GAChB,MAAM,IAAII,UAAU,kDAExB,OAAOH,EAAWM,IAAIP,mBAQX,MAIXQ,YAAYC,GACRb,EAAYS,IAAIN,MAAM,GACtBF,EAAYQ,IAAIN,MAAM,GACtB,IAAK,MAAMW,KAAmBD,EAAYE,SACtCD,EAAgBE,iBAAiB,SAAUb,KAAKc,qBAAqBC,KAAKf,MAAO,CAAEgB,MAAM,EAAMC,SAAS,IAE5GP,EAAYG,iBAAiB,SAAUb,KAAKkB,aAAaH,KAAKf,MAAO,CAAEgB,MAAM,EAAMC,SAAS,IAC5FE,OAAON,iBAAiB,eAAgBb,KAAKoB,yBAAyBL,KAAKf,OAK/ES,uBACIV,EAAuBC,KAAMF,GAAa,GAK9CW,eACIV,EAAuBC,KAAMH,GAAa,GAO9CY,yBAAyBY,IAChBd,EAAuBP,KAAMH,IAAgBU,EAAuBP,KAAMF,KAC3EuB,EAAGC,iBACHD,EAAGE,YAAc,KAI7B1B,EAAc,IAAI2B,QAAW1B,EAAc,IAAI0B","file":"FormBeforeUnloadConfirm.esm.js","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _submitForm, _changeCtrl;\n/**\n * If the page is tries to close with the contents of the form control changed, a confirm dialog is displayed to prevent the changes from being discarded.\n *\n * @version 1.0.0\n */\nexport default class {\n    /**\n     * @param {HTMLFormElement} thisElement - Target element\n     */\n    constructor(thisElement) {\n        _submitForm.set(this, false); // フォームが送信されたか\n        _changeCtrl.set(this, false); // フォームコントロールが変更されたか\n        for (const formCtrlElement of thisElement.elements) {\n            formCtrlElement.addEventListener('change', this._formCtrlChangeEvent.bind(this), { once: true, passive: true });\n        }\n        thisElement.addEventListener('submit', this._submitEvent.bind(this), { once: true, passive: true });\n        window.addEventListener('beforeunload', this._windowBeforeUnloadEvent.bind(this));\n    }\n    /**\n     * フォームコントロールの内容が変更されたときの処理\n     */\n    _formCtrlChangeEvent() {\n        __classPrivateFieldSet(this, _changeCtrl, true);\n    }\n    /**\n     * フォームが送信されたときの処理\n     */\n    _submitEvent() {\n        __classPrivateFieldSet(this, _submitForm, true);\n    }\n    /**\n     * window - beforeunload の処理\n     *\n     * @param {BeforeUnloadEvent} ev - Event\n     */\n    _windowBeforeUnloadEvent(ev) {\n        if (!__classPrivateFieldGet(this, _submitForm) && __classPrivateFieldGet(this, _changeCtrl)) {\n            ev.preventDefault();\n            ev.returnValue = ''; // for Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=866818\n        }\n    }\n}\n_submitForm = new WeakMap(), _changeCtrl = new WeakMap();\n"]}